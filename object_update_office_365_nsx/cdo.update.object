#!/bin/sh

#Usage:
#export OAUTH=my_API_token
#bash cdo.update.object Web-Servers nsx.ip 	
 
log  () { echo $(date +"[%F %R:%S] ") "$@"; }
fail () { log "$@"; exit 1; }
 
which -s jq || fail "jq must be installed"
which -s diff || fail "diff must be installed"
[ ${OAUTH} ] || fail "You must specify OAuth token in the \$OAUTH system variable"
[ ${1} ] || fail "${0} <object name> <input file name> [deploy]"
[ ${2} ] || fail "${0} <object name> <input file name> [deploy]"
[ -f ${2} ] || fail "input file not found: ${2}"
 
# validate OAUTH token
API_URL="https://www.defenseorchestrator.com/aegis/rest/v1/services"
#API_URL="https://staging.dev.lockhart.io/aegis/rest/v1/services"
curl -s -o /dev/null -f -H "Content-Type: application/json" -H "Authorization: bearer ${OAUTH}" -X GET "${API_URL}" || fail "\"${OAUTH}\" is an invalid OAuth token"
 
# find and retrieve the object
OBJECT_NAME=${1}
OBJECT_URL="${API_URL}/targets/objects"
OBJECT_SEARCH_URL="${OBJECT_URL}?q=name:${OBJECT_NAME}%20AND%20issueType:SHARED"
OBJECT_UID=$(curl -s -f -H "Content-Type: application/json" -H "Authorization: bearer ${OAUTH}" -X GET "${OBJECT_SEARCH_URL}" | jq -r '.[0].uid')
( [ ${OBJECT_UID} ] && [[ "x${OBJECT_UID}" != "xnull" ]] ) || fail "\"${OBJECT_NAME}\" object not found"

OBJECT_READ_URL="${OBJECT_URL}/${OBJECT_UID}"
curl -s -f -H "Content-Type: application/json" -H "Authorization: bearer ${OAUTH}" -X GET "${OBJECT_READ_URL}" | jq -r '.elements[]' | sort > existing.ips

IN_FILE_NAME=${2}
DIFF=$(diff ${IN_FILE_NAME} existing.ips)
if [ -z "${DIFF}" ]; then
    echo "No change"
    exit 0
fi

echo "Updating..."

# add IP addresses to object
CONTENTS=""
while read LINE
do
  # that was wicked slow....
  # OBJECT=$(echo "${OBJECT}" | jq -c --arg IP ${LINE} '.contents |= . + [ { "@type": "NetworkContent", "sourceElement": $IP, "destinationElement": null, "wildcardMaskElement": null } ] ')
  CONTENTS+=",{ \"@type\": \"NetworkContent\", \"sourceElement\": \"${LINE}\", \"destinationElement\": null, \"wildcardMaskElement\": null }"
done < "${IN_FILE_NAME}"
 # remove the first ","
CONTENTS="${CONTENTS:1}"

echo "{\"contents\" : [ ${CONTENTS} ]}" > body.json

# save the object
curl -s -o output.txt -f -H "Content-Type: application/json" -H "Authorization: bearer ${OAUTH}" -X PUT --data @body.json "${OBJECT_URL}/${OBJECT_UID}" || fail "Could not update \"${OBJECT_NAME}\" object"

# Deploy - if requested
if [ ${3} ] && [ ${3} = 'deploy' ]; then

  # Creating a job to update all affected devices!
  sleep 5

  curl -s -f -H "Content-Type: application/json" -H "Authorization: bearer ${OAUTH}" -X GET "${OBJECT_READ_URL}" | jq -r '.references[].uid' > device.uids

  # Initialize the job to template
  JOB=$(<job.template)

  # add device uids to job
  while read LINE
  do
    JOB=$(echo "${JOB}" | jq -c --arg DEVICE_UID ${LINE} '.objRefs |= . + [ {"uid": $DEVICE_UID,"namespace": "targets", "type": "devices"} ] ')
  done < device.uids

  echo ${JOB} > body.json

  JOB_URL="${API_URL}/state-machines/jobs"
  cat body.json
  curl -s -o output.txt -f -H "Content-Type: application/json" -H "Authorization: bearer ${OAUTH}" -X POST --data @body.json "${JOB_URL}" || fail "Could not create job"

fi
